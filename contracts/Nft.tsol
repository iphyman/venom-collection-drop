pragma ever-solidity >=0.61.2;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "@broxus/tip4/contracts/TIP4_1/TIP4_1Nft.tsol";
import "@broxus/tip4/contracts/TIP4_2/TIP4_2Nft.tsol";
import "@broxus/tip4/contracts/TIP4_3/TIP4_3Nft.tsol";

contract Nft is TIP4_1Nft, TIP4_2Nft, TIP4_3Nft {
  constructor(
    address owner,
    address sendGasTo,
    uint128 remainOnNft,
    string json,
    uint128 indexDeployValue,
    uint128 indexDestroyValue,
    TvmCell codeIndex
  )
    public
    TIP4_1Nft(owner, sendGasTo, remainOnNft)
    TIP4_2Nft(json)
    TIP4_3Nft(indexDeployValue, indexDestroyValue, codeIndex)
  {
    tvm.accept();
  }

  function _beforeTransfer(
    address to,
    address sendGasTo,
    mapping(address => CallbackParams) callbacks
  ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
    TIP4_3Nft._destructIndex(sendGasTo);
  }

  function _afterTransfer(
    address to,
    address sendGasTo,
    mapping(address => CallbackParams) callbacks
  ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
    TIP4_3Nft._deployIndex();
  }

  function _beforeChangeOwner(
    address oldOwner,
    address newOwner,
    address sendGasTo,
    mapping(address => CallbackParams) callbacks
  ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
    TIP4_3Nft._destructIndex(sendGasTo);
  }

  function _afterChangeOwner(
    address oldOwner,
    address newOwner,
    address sendGasTo,
    mapping(address => CallbackParams) callbacks
  ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
    TIP4_3Nft._deployIndex();
  }
}
